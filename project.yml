title: "NBME - Score Clinical Patient Notes"
description: >
  Exploring spacy's [project](https://spacy.io/usage/projects) mechanism using data from
  Kaggle's [NBME - Score Clinical Patient Notes](https://www.kaggle.com/c/nbme-score-clinical-patient-notes/overview)
  which is treated as a named entity recognition (NER) problem here.
  The purpose of this repository is not to achieve NER performance but rather play with defining different spacy workflows.

vars:
  train_splits: "train_split.json.gz"
  case_num: -1
  feature_num: -1
  train: "train-case_num-${vars.case_num}-feature_num-${vars.feature_num}"
  dev: "dev-case_num-${vars.case_num}-feature_num-${vars.feature_num}"
  test: "test-case_num-${vars.case_num}-feature_num-${vars.feature_num}"
  config: "config.cfg"
  name: "nbme_score_clinical_patient_notes"
  version: "0.0.0"
  host: "127.0.0.1"
  port: 5000

directories: ["configs", "corpus", "input", "packages", "scripts", "training"]

assets:
  - dest: "input/nbme-score-clinical-patient-notes/${vars.train_splits}"

workflows:
  all:
    - preprocess
    - debug
    - train
    - evaluate
  deploy:
    - package
    - install
    - serve

commands:
  - name: "preprocess"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/preprocess.py input/nbme-score-clinical-patient-notes corpus --case-num ${vars.case_num} --feature-num ${vars.feature_num}"
    deps:
      - "input/nbme-score-clinical-patient-notes/${vars.train_splits}"
      - "scripts/preprocess.py"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
      - "corpus/${vars.test}.spacy"

  - name: "debug"
    help: "Debug the data"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
      - "corpus/${vars.test}.spacy"
    script:
      - "python -m spacy debug data configs/${vars.config}  --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy --paths.test corpus/${vars.test}.spacy"

  - name: "train"
    help: "Train a custom NER model"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy" # --code scripts/custom_functions.py
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the custom model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/${vars.test}.spacy --output training/metrics.json" # --code scripts/custom_functions.py
    deps:
      - "corpus/${vars.test}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force" # --code scripts/custom_functions.py"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: "install"
    help: "Install model"
    script:
      - "pip install packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: "serve"
    help: "Serve the models via a FastAPI REST API"
    script:
      - "uvicorn scripts.main:app --reload --host ${vars.host} --port ${vars.port}"
    deps:
      - "scripts/main.py"
    no_skip: true